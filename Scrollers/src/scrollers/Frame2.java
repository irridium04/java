/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package scrollers;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.BufferedImage;
import javax.swing.ImageIcon;
import javax.swing.Timer;

/**
 *
 * @author Collin Shook
 */
public class Frame2 extends javax.swing.JFrame {

    
    BufferedImage image;
    
    ImageIcon myImage;
    
    ScrollingPic thePix = new ScrollingPic();
    ScrollingPic thePix2 = new ScrollingPic();
    
    
    Ball myBall;
    int ballSize = 50;
    int ballX = 0;
    int ballY = 0;
    int ballSpeed = 15;
    
    int xPos;
    int yPos;
    
    Timer myTimer;
    
    /**
     * Creates new form FrameStart
     */
    public Frame2() {
        initComponents();
        
        xPos = 0;
        yPos = 0;
        
        thePix.setVisible(true);
        thePix2.setVisible(true);
        
        thePix.setSize(3000, 300);
        thePix2.setSize(3000, 300);
        
        thePix.setLocation(0, 0);
        thePix2.setLocation(3000, 0);
        
        jLP.setSize(500, 300);
        
        jLP.add(thePix, 0);
        jLP.add(thePix2, 0);
        
 
        
        SetupBall();
        StartAnimation();
        
        myBall.requestFocus();
    }
    
    
    void SetupBall()
    {
        
        myBall = new Ball();
        
        myBall.setSize(jLP.getWidth(), jLP.getHeight());
        myBall.setRadius(ballSize);
        
        myBall.setVisible(true);
        
        myBall.setLocation(ballX, ballY);
        
        
        myBall.addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent e) {

            }

            @Override
            public void keyPressed(KeyEvent e) {
                if(e.getKeyCode() == 37) // left arrow
                {
                    ballX -= ballSpeed;
                    
                    if(ballX < 1)
                    {
                        ballX = 1;
                    }
                    
                }
                if(e.getKeyCode() == 39) // right arrow
                {
                   
                    ballX += ballSpeed;

                    if(ballX > jLP.getWidth() - ballSize)
                    {
                        ballX = jLP.getWidth() - ballSize - 1;
                    }
                    
                    
                }
                
                if(e.getKeyCode() == 38) // up arrow
                {
                    ballY -= ballSpeed;
                    
                    if(ballY < 1)
                    {
                        ballY = 1;
                    }
                    
                }
                if(e.getKeyCode() == 40) // down arrow
                {

                    ballY += ballSpeed;

                    if(ballY > jLP.getHeight() - ballSize)
                    {
                        ballY = jLP.getHeight() - ballSize - 1;
                    }
                    
                    
                }
                
                
                myBall.setLocation(ballX / 2, ballY / 2);
                myBall.setX(ballX / 2);
                myBall.setY(ballY / 2);
                myBall.repaint();
                System.out.println(ballX);
                
            }

            @Override
            public void keyReleased(KeyEvent e) {

            }
        });
        
        jLP.add(myBall, 90);
        jLP.setLayer(myBall, 90);
    }

    
    void StartAnimation()
    {
        myTimer = new Timer(1, (ActionEvent e) -> {
            xPos -= 3;
            
            thePix.setLocation(xPos, yPos); 
            thePix2.setLocation(xPos + 3000, yPos);
            
            if(xPos <= -3000)
            {
                xPos = 0;
            }
        });
        
        myTimer.start();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLP = new javax.swing.JLayeredPane();
        jBttnHome = new javax.swing.JButton();
        jBttnToggleScroll = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jLPLayout = new javax.swing.GroupLayout(jLP);
        jLP.setLayout(jLPLayout);
        jLPLayout.setHorizontalGroup(
            jLPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jLPLayout.setVerticalGroup(
            jLPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 224, Short.MAX_VALUE)
        );

        jBttnHome.setText("Home");
        jBttnHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBttnHomeActionPerformed(evt);
            }
        });

        jBttnToggleScroll.setText("Start / Stop");
        jBttnToggleScroll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBttnToggleScrollActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLP)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jBttnToggleScroll)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jBttnHome)
                .addContainerGap(196, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBttnToggleScroll)
                    .addComponent(jBttnHome))
                .addContainerGap(11, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBttnHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBttnHomeActionPerformed
        // TODO add your handling code here:
        Scrollers.InitMainFrame();

        this.dispose();
    }//GEN-LAST:event_jBttnHomeActionPerformed

    private void jBttnToggleScrollActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBttnToggleScrollActionPerformed
        // TODO add your handling code here:
        if( myTimer.isRunning())
        {
            myTimer.stop();
        }
        else
        {
            myTimer.start();
        }
    }//GEN-LAST:event_jBttnToggleScrollActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frame2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frame2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frame2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frame2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frame2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBttnHome;
    private javax.swing.JButton jBttnToggleScroll;
    private javax.swing.JLayeredPane jLP;
    // End of variables declaration//GEN-END:variables
}
